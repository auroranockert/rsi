<module name='region'>
  <struct name='Region' opaque='true'/>

  <struct name='Rectangle'>
    <field name='x' type='int'/>
    <field name='y' type='int'/>
    <field name='width' type='int'/>
    <field name='height' type='int'/>
  </struct>

  <module name='overlap'>
    <enum name='Overlap'>
      <value name='In' value='0'/>
      <value name='Out' value='1'/>
      <value name='Part' value='2'/>
    </enum>
  </module>

  <implementation for='Region'>
    <method name='new' foreign='cairo_region_create'>
      <result type='{Region}'/>
    </method>
    
    <method name='rectangle' foreign='cairo_region_create_rectangle'>
      <argument name='rectangle' type='{Rectangle}' pass_by='ref'/>
      <result type='{Region}'/>
    </method>
    
    <!-- cairo_region_create_rectangles -->

    <method name='status' foreign='cairo_region_status'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <result type='[super::Status]'/>
    </method>

    <method name='get_extents' foreign='cairo_region_get_extents'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='extents' type='{Rectangle}' pass_by='mut-ref' transformer='zero'/>
      <result name='extents' type='{Rectangle}' transformer='out'/>
    </method>

    <method name='num_rectangles' foreign='cairo_region_num_rectangles'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <result type='int'/>
    </method>

    <method name='get_rectangle' foreign='cairo_region_get_rectangle'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='nth' type='int'/>
      <argument name='rectangle' type='{Rectangle}' pass_by='mut-ref' transformer='zero'/>
      <result name='rectangle' type='{Rectangle}' transformer='out'/>
    </method>

    <!-- cairo_region_is_empty -->
    <!-- cairo_region_contains_point -->
    
    <method name='containts_rectangle' foreign='cairo_region_contains_rectangle'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='rectangle' type='{Rectangle}' pass_by='ref'/>
      <result type='[overlap::Overlap]'/>
    </method>

    <!-- cairo_region_equal -->

    <method name='translate' foreign='cairo_region_translate'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='dx' type='int'/>
      <argument name='dy' type='int'/>
    </method>

    <method name='intersect_rectangle' foreign='cairo_region_intersect_rectangle'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='rectangle' type='{Rectangle}' pass_by='ref'/>
      <result type='[super::Status]'/>
    </method>

    <method name='subtract' foreign='cairo_region_subtract'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='region' type='{Region}' pass_by='ref'/>
      <result type='[super::Status]'/>
    </method>

    <method name='subtract_rectangle' foreign='cairo_region_subtract_rectangle'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='rectangle' type='{Rectangle}' pass_by='ref'/>
      <result type='[super::Status]'/>
    </method>

    <method name='union' foreign='cairo_region_union'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='region' type='{Region}' pass_by='ref'/>
      <result type='[super::Status]'/>
    </method>

    <method name='union_rectangle' foreign='cairo_region_union_rectangle'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='rectangle' type='{Rectangle}' pass_by='ref'/>
      <result type='[super::Status]'/>
    </method>

    <method name='xor' foreign='cairo_region_xor'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='region' type='{Region}' pass_by='ref'/>
      <result type='[super::Status]'/>
    </method>

    <method name='xor_rectangle' foreign='cairo_region_xor_rectangle'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
      <argument name='rectangle' type='{Rectangle}' pass_by='ref'/>
      <result type='[super::Status]'/>
    </method>
  </implementation>

  <implementation trait='std::clone::Clone' for='Region'>
    <method name='clone' foreign='cairo_region_copy'>
      <argument type='{Region}' pass_by='self' transformer='opaque'/>
      <result type='{Region}'/>
    </method>
  </implementation>

  <implementation trait='std::ops::Drop' for='Region'>
    <method name='drop' foreign='cairo_region_destroy'>
      <argument type='{Region}' pass_by='mut-self' transformer='opaque'/>
    </method>
  </implementation>
</module>